{"ast":null,"code":"// Generated by LiveScript 1.4.0\nvar split, join, lines, unlines, words, unwords, chars, unchars, reverse, repeat, capitalize, camelize, dasherize;\nsplit = curry$(function (sep, str) {\n  return str.split(sep);\n});\njoin = curry$(function (sep, xs) {\n  return xs.join(sep);\n});\n\nlines = function lines(str) {\n  if (!str.length) {\n    return [];\n  }\n\n  return str.split('\\n');\n};\n\nunlines = function unlines(it) {\n  return it.join('\\n');\n};\n\nwords = function words(str) {\n  if (!str.length) {\n    return [];\n  }\n\n  return str.split(/[ ]+/);\n};\n\nunwords = function unwords(it) {\n  return it.join(' ');\n};\n\nchars = function chars(it) {\n  return it.split('');\n};\n\nunchars = function unchars(it) {\n  return it.join('');\n};\n\nreverse = function reverse(str) {\n  return str.split('').reverse().join('');\n};\n\nrepeat = curry$(function (n, str) {\n  var result, i$;\n  result = '';\n\n  for (i$ = 0; i$ < n; ++i$) {\n    result += str;\n  }\n\n  return result;\n});\n\ncapitalize = function capitalize(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\ncamelize = function camelize(it) {\n  return it.replace(/[-_]+(.)?/g, function (arg$, c) {\n    return (c != null ? c : '').toUpperCase();\n  });\n};\n\ndasherize = function dasherize(str) {\n  return str.replace(/([^-A-Z])([A-Z]+)/g, function (arg$, lower, upper) {\n    return lower + \"-\" + (upper.length > 1 ? upper : upper.toLowerCase());\n  }).replace(/^([A-Z]+)/, function (arg$, upper) {\n    if (upper.length > 1) {\n      return upper + \"-\";\n    } else {\n      return upper.toLowerCase();\n    }\n  });\n};\n\nmodule.exports = {\n  split: split,\n  join: join,\n  lines: lines,\n  unlines: unlines,\n  words: words,\n  unwords: unwords,\n  chars: chars,\n  unchars: unchars,\n  reverse: reverse,\n  repeat: repeat,\n  capitalize: capitalize,\n  camelize: camelize,\n  dasherize: dasherize\n};\n\nfunction curry$(f, bound) {\n  var context,\n      _curry = function _curry(args) {\n    return f.length > 1 ? function () {\n      var params = args ? args.concat() : [];\n      context = bound ? context || this : this;\n      return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);\n    } : f;\n  };\n\n  return _curry();\n}","map":null,"metadata":{},"sourceType":"script"}