{"ast":null,"code":"// Generated by LiveScript 1.4.0\nvar apply,\n    curry,\n    flip,\n    fix,\n    over,\n    memoize,\n    slice$ = [].slice,\n    toString$ = {}.toString;\napply = curry$(function (f, list) {\n  return f.apply(null, list);\n});\n\ncurry = function curry(f) {\n  return curry$(f);\n};\n\nflip = curry$(function (f, x, y) {\n  return f(y, x);\n});\n\nfix = function fix(f) {\n  return function (g) {\n    return function () {\n      return f(g(g)).apply(null, arguments);\n    };\n  }(function (g) {\n    return function () {\n      return f(g(g)).apply(null, arguments);\n    };\n  });\n};\n\nover = curry$(function (f, g, x, y) {\n  return f(g(x), g(y));\n});\n\nmemoize = function memoize(f) {\n  var memo;\n  memo = {};\n  return function () {\n    var args, key, arg;\n    args = slice$.call(arguments);\n\n    key = function () {\n      var i$,\n          ref$,\n          len$,\n          results$ = [];\n\n      for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {\n        arg = ref$[i$];\n        results$.push(arg + toString$.call(arg).slice(8, -1));\n      }\n\n      return results$;\n    }().join('');\n\n    return memo[key] = key in memo ? memo[key] : f.apply(null, args);\n  };\n};\n\nmodule.exports = {\n  curry: curry,\n  flip: flip,\n  fix: fix,\n  apply: apply,\n  over: over,\n  memoize: memoize\n};\n\nfunction curry$(f, bound) {\n  var context,\n      _curry = function _curry(args) {\n    return f.length > 1 ? function () {\n      var params = args ? args.concat() : [];\n      context = bound ? context || this : this;\n      return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);\n    } : f;\n  };\n\n  return _curry();\n}","map":null,"metadata":{},"sourceType":"script"}