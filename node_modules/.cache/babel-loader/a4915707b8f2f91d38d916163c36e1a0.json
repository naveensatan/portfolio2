{"ast":null,"code":"// Generated by LiveScript 1.4.0\nvar values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty, each, map, compact, filter, reject, partition, find;\n\nvalues = function values(object) {\n  var i$,\n      x,\n      results$ = [];\n\n  for (i$ in object) {\n    x = object[i$];\n    results$.push(x);\n  }\n\n  return results$;\n};\n\nkeys = function keys(object) {\n  var x,\n      results$ = [];\n\n  for (x in object) {\n    results$.push(x);\n  }\n\n  return results$;\n};\n\npairsToObj = function pairsToObj(object) {\n  var i$,\n      len$,\n      x,\n      resultObj$ = {};\n\n  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {\n    x = object[i$];\n    resultObj$[x[0]] = x[1];\n  }\n\n  return resultObj$;\n};\n\nobjToPairs = function objToPairs(object) {\n  var key,\n      value,\n      results$ = [];\n\n  for (key in object) {\n    value = object[key];\n    results$.push([key, value]);\n  }\n\n  return results$;\n};\n\nlistsToObj = curry$(function (keys, values) {\n  var i$,\n      len$,\n      i,\n      key,\n      resultObj$ = {};\n\n  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {\n    i = i$;\n    key = keys[i$];\n    resultObj$[key] = values[i];\n  }\n\n  return resultObj$;\n});\n\nobjToLists = function objToLists(object) {\n  var keys, values, key, value;\n  keys = [];\n  values = [];\n\n  for (key in object) {\n    value = object[key];\n    keys.push(key);\n    values.push(value);\n  }\n\n  return [keys, values];\n};\n\nempty = function empty(object) {\n  var x;\n\n  for (x in object) {\n    return false;\n  }\n\n  return true;\n};\n\neach = curry$(function (f, object) {\n  var i$, x;\n\n  for (i$ in object) {\n    x = object[i$];\n    f(x);\n  }\n\n  return object;\n});\nmap = curry$(function (f, object) {\n  var k,\n      x,\n      resultObj$ = {};\n\n  for (k in object) {\n    x = object[k];\n    resultObj$[k] = f(x);\n  }\n\n  return resultObj$;\n});\n\ncompact = function compact(object) {\n  var k,\n      x,\n      resultObj$ = {};\n\n  for (k in object) {\n    x = object[k];\n\n    if (x) {\n      resultObj$[k] = x;\n    }\n  }\n\n  return resultObj$;\n};\n\nfilter = curry$(function (f, object) {\n  var k,\n      x,\n      resultObj$ = {};\n\n  for (k in object) {\n    x = object[k];\n\n    if (f(x)) {\n      resultObj$[k] = x;\n    }\n  }\n\n  return resultObj$;\n});\nreject = curry$(function (f, object) {\n  var k,\n      x,\n      resultObj$ = {};\n\n  for (k in object) {\n    x = object[k];\n\n    if (!f(x)) {\n      resultObj$[k] = x;\n    }\n  }\n\n  return resultObj$;\n});\npartition = curry$(function (f, object) {\n  var passed, failed, k, x;\n  passed = {};\n  failed = {};\n\n  for (k in object) {\n    x = object[k];\n    (f(x) ? passed : failed)[k] = x;\n  }\n\n  return [passed, failed];\n});\nfind = curry$(function (f, object) {\n  var i$, x;\n\n  for (i$ in object) {\n    x = object[i$];\n\n    if (f(x)) {\n      return x;\n    }\n  }\n});\nmodule.exports = {\n  values: values,\n  keys: keys,\n  pairsToObj: pairsToObj,\n  objToPairs: objToPairs,\n  listsToObj: listsToObj,\n  objToLists: objToLists,\n  empty: empty,\n  each: each,\n  map: map,\n  filter: filter,\n  compact: compact,\n  reject: reject,\n  partition: partition,\n  find: find\n};\n\nfunction curry$(f, bound) {\n  var context,\n      _curry = function _curry(args) {\n    return f.length > 1 ? function () {\n      var params = args ? args.concat() : [];\n      context = bound ? context || this : this;\n      return params.push.apply(params, arguments) < f.length && arguments.length ? _curry.call(context, params) : f.apply(context, params);\n    } : f;\n  };\n\n  return _curry();\n}","map":null,"metadata":{},"sourceType":"script"}